{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","MainPage","filterRobots","searchField","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9782a9fa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id } = props\n\treturn (\n\t\t<div className='tc grow bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t{\n\t\t\trobots.map((user, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tid={robots[i].id}\n\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\taria-label='Search Robots'\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t// create a scrollable component\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', \n\t\t\t\t\t\theight: '500px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\t\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\t\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent { // good for passing down to dumb components\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t}\n\t}\n\t// don't use it too often. use as needed for optimizing number of renders\n\tshouldComponentUpdate(nextProps, nextState) { // lifecycle method\n\t\tif (this.state.count !== nextState.count) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tupdateCount = () => {\n\t\t// this.setState({ count: this.state.count + 1}) // this is one way\n\t\t// or\n\t\tthis.setState(state => {\n\t\t\treturn {count: state.count + 1}\n\t\t})\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tid='counter'\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tonClick={this.updateCount}>\n\t\t\t\tCount: {this.state.count}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\tshouldComponentUpdate(nextProps, nextState) { // lifecycle method\n\t\treturn false; // header component now renders ONCE\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<CounterButton color={'red'} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from './Header';\n\nexport class MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    const { robots, searchField } = this.props;\n    return robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n  }\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots()} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MainPage from '../components/MainPage';\n//import {robots} from '../robots';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField, // this line is useless unless we work with combined root reducer\n\t\t// searchField: state.searchField // only works when searchRobots is the only reducer\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending\n\t\t//error: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots()) // this is the correction\n\t}\n}\n\nclass App extends Component {\n\t/*\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = { // state describes our app.\n\t\t\trobots: []\n\t\t\t//searchfield: ''\n\t\t}\n\t}\n\t*/\n\t/*\n\tcomponentDidMount() {\n\t\t\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ robots: users}));\n\t\t\n\t\t//this.props.onRequestRobots(); // this is supposed to work but it's pending forever\n\t}\n\t*/\n\t/*\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value}) // set the state of searchfield\n\t}\n\t*/\n\trender() {\n\t\treturn <MainPage { ...this.props } />\n\t\t/*\n\t\tconst { robots } = this.state\n\t\tconst { searchField, onSearchChange } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn !robots.length ?\n\t\t<h1>Loading</h1> :\n\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t);\n\t\t*/\n\t}\n}\n\n//export default App;\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n} from './constants.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n}\n\n// use them for specific use cases\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true});\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n\t<Provider store={store}>\n    \t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}